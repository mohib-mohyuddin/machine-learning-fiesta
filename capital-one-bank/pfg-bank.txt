{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PFG Bank: Credit Card Design\n",
    "\n",
    "* Team-lead GitHub userid: rsm-xyz123\n",
    "* Group name: Group 5\n",
    "* Team member names:\n",
    "    - Gaetan Rieben \n",
    "    - Albara Altoukhi\n",
    "    - Mohib Mohyuddin\n",
    "    - Mohannad Alsaegh"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup\n",
    "\n",
    "Please complete this python notebook with your group by answering the questions in `pfg-bank-msba.pdf`.\n",
    "\n",
    "Create a Notebook with all your results and comments and push the Notebook to GitHub when your team is done. Make sure to connect the GitHub repo to GradeScope before the due date. All results MUST be reproducible (i.e., the TA and I must be able to recreate your output from the Jupyter Notebook without changes or errors). This means that you should NOT use any python-packages that are not part of the RSM-MSBA docker container.\n",
    "\n",
    "> Note: Please do not install any packages as part of your Jupyter Notebook submission\n",
    "\n",
    "This is a group assignment and you will be using Git and GitHub. If two people edit the same file at the same time you could get what is called a \"merge conflict\". This is not something serious but you should realize that Git will not decide for you who's changes to accept. The team-lead will have to determine the edits to use. To avoid merge conflicts, **always** \"pull\" changes to the repo before you start working on any files. Then, when you are done, save and commit your changes, and then push them to GitHub. Make \"pull first\" a habit!\n",
    "\n",
    "If multiple people are going to work on the assignment at the same time I recommend you work in different notebooks. You can then `%run ...`  these \"sub\" notebooks from the main assignment file. You can seen an example of this in action below for the `model1.ipynb` notebook\n",
    "\n",
    "Some group work-flow tips:\n",
    "\n",
    "* Pull, edit, save, stage, commit, and push\n",
    "* Schedule who does what and when\n",
    "* Try to avoid working simultaneously on the same file\n",
    "* If you are going to work simultaneously, do it in different notebooks, e.g.,\n",
    "    - model1.ipynb, question1.ipynb, etc.\n",
    "* Use the `%run ... ` command to bring different pieces of code together into the main jupyter notebook\n",
    "* Put python functions in modules that you can import from your notebooks. See the example below for the `example` function defined in `utils/functions.py`\n",
    "\n",
    "A graphical depiction of the group work-flow is shown below:"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/github-group-workflow.png)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/github-group-workflow.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.9.24'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import pyrsm as rsm\n",
    "rsm.__version__ # should be 0.9.23 or newer"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question answers"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Why does Customer Lifetime Value vary with BK score? Why does Customer Lifetime Value vary by product? (See Exhibit 2 to help answer these questions)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Banks limit exposure to high bk/credit risk customers by offering them products with higher interest rates, lower credit limits, or more stringent repayment terms which impacts their CLV. Also, banks are typically conservative; minimize potential losses through management of the account rather than maximizing revenue through upselling or cross-selling additional products and services. \n",
    "Banks incur additional cost for defaulting customers which includes collections, account monitoring, and legal proceedings which can diminish the net CLV overtime. Finally, customers with lower scores may exhibit more cautious financial behavior, affecting their utilization of banking products and services. Conversely, those with better scores may be more financially active, using a broader range of products and engaging in more transactions, potentially increasing their CLV.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "###Loading past data\n",
    "import pandas as pd\n",
    "import pyrsm as rsm\n",
    "\n",
    "exh1 = pd.read_excel('data/exhibits.xls', sheet_name='exhibit1', dtype={'apr':'category','fixed_var':'category', 'annual_fee':'category', 'visamc':'category', 'nr_mailed':'int', 'non_resp':'int', 'resp':'int', 'bk_score':'category', 'average_bk': 'category'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "exh_melt = pd.melt(\n",
    "    exh1,\n",
    "    id_vars=['apr', 'fixed_var', 'annual_fee', 'bk_score'],\n",
    "    value_vars=['resp', 'non_resp'],\n",
    "    var_name='resp',\n",
    "    value_name='freq'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "      <th>resp</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>resp</td>\n",
       "      <td>1533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>resp</td>\n",
       "      <td>2896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>resp</td>\n",
       "      <td>590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>resp</td>\n",
       "      <td>2052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>4329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>3004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>2983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>2516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>resp</td>\n",
       "      <td>2115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>resp</td>\n",
       "      <td>1761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>resp</td>\n",
       "      <td>2451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>resp</td>\n",
       "      <td>708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>resp</td>\n",
       "      <td>373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>165467</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>78104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>142410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>97948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>172671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>166996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>252017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>34825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>62484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>92885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>80239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>47549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>49292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>non_resp</td>\n",
       "      <td>49627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var annual_fee bk_score      resp    freq\n",
       "0   16.8     Fixed         20      200      resp    1533\n",
       "1   16.8     Fixed          0      200      resp    2896\n",
       "2   19.8     Fixed         20      200      resp     590\n",
       "3   19.8     Fixed          0      200      resp    2052\n",
       "4   14.9     Fixed         20      250      resp    4329\n",
       "5   14.9  Variable         20      250      resp    3004\n",
       "6   16.8     Fixed         20      250      resp    2983\n",
       "7   19.8     Fixed         20      250      resp     175\n",
       "8   16.8     Fixed          0      250      resp    2516\n",
       "9   19.8     Fixed          0      250      resp    2115\n",
       "10  14.9     Fixed         20      150      resp    1761\n",
       "11  14.9     Fixed          0      150      resp    2451\n",
       "12  14.9  Variable         20      150      resp     708\n",
       "13  16.8     Fixed         20      150      resp     373\n",
       "14  16.8     Fixed         20      200  non_resp  165467\n",
       "15  16.8     Fixed          0      200  non_resp   78104\n",
       "16  19.8     Fixed         20      200  non_resp  142410\n",
       "17  19.8     Fixed          0      200  non_resp   97948\n",
       "18  14.9     Fixed         20      250  non_resp  172671\n",
       "19  14.9  Variable         20      250  non_resp  166996\n",
       "20  16.8     Fixed         20      250  non_resp  252017\n",
       "21  19.8     Fixed         20      250  non_resp   34825\n",
       "22  16.8     Fixed          0      250  non_resp   62484\n",
       "23  19.8     Fixed          0      250  non_resp   92885\n",
       "24  14.9     Fixed         20      150  non_resp   80239\n",
       "25  14.9     Fixed          0      150  non_resp   47549\n",
       "26  14.9  Variable         20      150  non_resp   49292\n",
       "27  16.8     Fixed         20      150  non_resp   49627"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exh_melt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = rsm.model.logistic(\n",
    "    data={'exh_melt': exh_melt},\n",
    "          rvar='resp',\n",
    "          lev='resp',\n",
    "          evar=['apr', 'fixed_var', 'annual_fee', 'bk_score'],\n",
    "          weights='freq')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : exh_melt\n",
      "Response variable    : resp\n",
      "Level                : resp\n",
      "Explanatory variables: apr, fixed_var, annual_fee, bk_score\n",
      "Weights used         : freq\n",
      "Null hyp.: There is no effect of x on resp\n",
      "Alt. hyp.: There is an effect of x on resp\n",
      "\n",
      "                        OR     OR%  coefficient  std.error  z.value p.value     \n",
      "Intercept            0.060  -94.0%        -2.81      0.016 -175.303  < .001  ***\n",
      "apr[16.8]            0.471  -52.9%        -0.75      0.019  -39.875  < .001  ***\n",
      "apr[19.8]            0.257  -74.3%        -1.36      0.024  -57.254  < .001  ***\n",
      "fixed_var[Variable]  0.741  -25.9%        -0.30      0.021  -14.336  < .001  ***\n",
      "annual_fee[20]       0.290  -71.0%        -1.24      0.015  -84.443  < .001  ***\n",
      "bk_score[200]        1.232   23.2%         0.21      0.024    8.519  < .001  ***\n",
      "bk_score[250]        1.425   42.5%         0.35      0.019   18.388  < .001  ***\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.033\n",
      "Pseudo R-squared (McFadden adjusted): 0.033\n",
      "Area under the RO Curve (AUC): 0.662\n",
      "Log-likelihood: -132938.55, AIC: 265891.101, BIC: 265976.74\n",
      "Chi-squared: 9185.877, df(6), p.value < 0.001 \n",
      "Nr obs: 1,520,000\n"
     ]
    }
   ],
   "source": [
    "lr.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var  annual_fee  bk_score\n",
       "0   16.8     Fixed          20       200\n",
       "1   16.8     Fixed          20       250\n",
       "2   16.8     Fixed          20       150\n",
       "3   16.8     Fixed           0       200\n",
       "4   16.8     Fixed           0       250\n",
       "5   16.8     Fixed           0       150\n",
       "6   16.8  Variable          20       200\n",
       "7   16.8  Variable          20       250\n",
       "8   16.8  Variable          20       150\n",
       "9   16.8  Variable           0       200\n",
       "10  16.8  Variable           0       250\n",
       "11  16.8  Variable           0       150\n",
       "12  19.8     Fixed          20       200\n",
       "13  19.8     Fixed          20       250\n",
       "14  19.8     Fixed          20       150\n",
       "15  19.8     Fixed           0       200\n",
       "16  19.8     Fixed           0       250\n",
       "17  19.8     Fixed           0       150\n",
       "18  19.8  Variable          20       200\n",
       "19  19.8  Variable          20       250\n",
       "20  19.8  Variable          20       150\n",
       "21  19.8  Variable           0       200\n",
       "22  19.8  Variable           0       250\n",
       "23  19.8  Variable           0       150\n",
       "24  14.9     Fixed          20       200\n",
       "25  14.9     Fixed          20       250\n",
       "26  14.9     Fixed          20       150\n",
       "27  14.9     Fixed           0       200\n",
       "28  14.9     Fixed           0       250\n",
       "29  14.9     Fixed           0       150\n",
       "30  14.9  Variable          20       200\n",
       "31  14.9  Variable          20       250\n",
       "32  14.9  Variable          20       150\n",
       "33  14.9  Variable           0       200\n",
       "34  14.9  Variable           0       250\n",
       "35  14.9  Variable           0       150"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dct = rsm.levels_list(exh_melt[['apr', 'fixed_var', 'annual_fee', 'bk_score']])\n",
    "dct\n",
    "\n",
    "exh1_mult_expand = rsm.expand_grid(dct)\n",
    "exh1_mult_expand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "      <th>pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.010029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.011581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.008156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.033799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.038884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.027609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.007448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.008604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.006054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.025257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.029096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.020598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.005496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.006351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.004466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.018725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.021593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.015252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.004077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.004712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.003312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.013938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.016084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.011342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.021044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.024258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.017148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.069096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.079057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.056822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>200</td>\n",
       "      <td>0.015673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.018083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>20</td>\n",
       "      <td>150</td>\n",
       "      <td>0.012759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>200</td>\n",
       "      <td>0.052115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>250</td>\n",
       "      <td>0.059786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>0.042719</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var  annual_fee  bk_score      pred\n",
       "0   16.8     Fixed          20       200  0.010029\n",
       "1   16.8     Fixed          20       250  0.011581\n",
       "2   16.8     Fixed          20       150  0.008156\n",
       "3   16.8     Fixed           0       200  0.033799\n",
       "4   16.8     Fixed           0       250  0.038884\n",
       "5   16.8     Fixed           0       150  0.027609\n",
       "6   16.8  Variable          20       200  0.007448\n",
       "7   16.8  Variable          20       250  0.008604\n",
       "8   16.8  Variable          20       150  0.006054\n",
       "9   16.8  Variable           0       200  0.025257\n",
       "10  16.8  Variable           0       250  0.029096\n",
       "11  16.8  Variable           0       150  0.020598\n",
       "12  19.8     Fixed          20       200  0.005496\n",
       "13  19.8     Fixed          20       250  0.006351\n",
       "14  19.8     Fixed          20       150  0.004466\n",
       "15  19.8     Fixed           0       200  0.018725\n",
       "16  19.8     Fixed           0       250  0.021593\n",
       "17  19.8     Fixed           0       150  0.015252\n",
       "18  19.8  Variable          20       200  0.004077\n",
       "19  19.8  Variable          20       250  0.004712\n",
       "20  19.8  Variable          20       150  0.003312\n",
       "21  19.8  Variable           0       200  0.013938\n",
       "22  19.8  Variable           0       250  0.016084\n",
       "23  19.8  Variable           0       150  0.011342\n",
       "24  14.9     Fixed          20       200  0.021044\n",
       "25  14.9     Fixed          20       250  0.024258\n",
       "26  14.9     Fixed          20       150  0.017148\n",
       "27  14.9     Fixed           0       200  0.069096\n",
       "28  14.9     Fixed           0       250  0.079057\n",
       "29  14.9     Fixed           0       150  0.056822\n",
       "30  14.9  Variable          20       200  0.015673\n",
       "31  14.9  Variable          20       250  0.018083\n",
       "32  14.9  Variable          20       150  0.012759\n",
       "33  14.9  Variable           0       200  0.052115\n",
       "34  14.9  Variable           0       250  0.059786\n",
       "35  14.9  Variable           0       150  0.042719"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exh1_mult_expand['pred'] = lr.predict(data=exh1_mult_expand)['prediction']\n",
    "exh1_mult_expand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               14.9\n",
      "fixed_var        Fixed\n",
      "annual_fee           0\n",
      "bk_score           200\n",
      "pred          0.069096\n",
      "Name: 27, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Convert the list of dictionaries to a pandas DataFrame\n",
    "df = pd.DataFrame(exh1_mult_expand)\n",
    "\n",
    "# Filter the DataFrame for bk_score = 200 and find the row with the maximum pred value\n",
    "filtered_df = df[df['bk_score'] == 200]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['pred'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               14.9\n",
      "fixed_var        Fixed\n",
      "annual_fee           0\n",
      "bk_score           250\n",
      "pred          0.079057\n",
      "Name: 28, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Filter the DataFrame for bk_score = 200 and find the row with the maximum pred value\n",
    "filtered_df = df[df['bk_score'] == 250]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['pred'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               14.9\n",
      "fixed_var        Fixed\n",
      "annual_fee           0\n",
      "bk_score           150\n",
      "pred          0.056822\n",
      "Name: 29, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Filter the DataFrame for bk_score = 200 and find the row with the maximum pred value\n",
    "filtered_df = df[df['bk_score'] == 200]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['pred'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the logistic regression conducted on previous data, we can see that the offering should be the same for each BK_score customers. As far as we can see, the lowest APR, with a fixed interest rate and no annual fee is the best offering that maximize the likelihood of conversion. However, it might be useful to check if those offering are the one who maximize profitability (CLV * probability).\n",
    "\n",
    "Although this product might not be the highest profitability, this product is preferred by all customers as per this past data analysis ( * Answer to question 3 *). This makes sense as this product has the lowest (and fixed) interest rate with no annual fee. This is by far the most affordable product for the clients. It might be interesting to compare this offering with the ones from competitors.\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Our testing strategy\n",
    "\n",
    "Given the fact that these mailing has been sent in the past but the situation has evolved, we believe that the customer responses might has changed given the market. Indeed,  many factors beyond PFG’s control had changed and could affect customers’ responses. Several of PFG’s competitors had launched major marketing campaigns during the holiday season. One competitor was aggressively marketing no-fee cards and a second was offering a substantial rebate program. (Answer question 2). Furthermore, the data are not representative of experiments/design nuances. The experiment design was not balanced. For instance, in September, they have sent offers only with a fixed rate. They haven't tired with variable rate. As such, we want to design the experiments properly. \n",
    "\n",
    "Therefore, we are willing to conduct a test mailing and analyze the results from it. But first, as we want to design the most optimal one, we want to use a partial factor design that would allow us to select the most balanced offerings. To do so, we use radiant"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/full_design.png)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the result, we can see that only 2 solutions might be balanced. The one with 6 trials, or the one with 12 trials. As such, as we want to minimize cost, we decided to select the one with a D-Efficiency closer to 0.8. We will go with 6 trials. See below the product designs to be tested"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/partial_design.png)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calculate sample size"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In my opinion, we should check the response rate of previous mailings, and set a higher response rate that we are willing to achieve in order to compute the sample size for our tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "resp = exh_melt[exh_melt['resp']=='resp']\n",
    "non_resp = exh_melt[exh_melt['resp']=='non_resp']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "total_resp = sum(resp['freq'])\n",
    "total_send = sum(resp['freq']) + sum(non_resp['freq'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.018082894736842107\n"
     ]
    }
   ],
   "source": [
    "response_rate = total_resp / total_send\n",
    "print(response_rate)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The current response rate is 1.80%. We will check what response rate we would need considering the CLV's. As such, we plan to take the average CLV across all products and all BK scores and use this average to compute the breakeven"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95.16666666666667"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exh2 = pd.read_excel('data/exhibits.xls', sheet_name='exhibit2', dtype={'offer':'category','apr':'category', 'fixed_var':'category', 'annual_fee':'category', 'clv150':'int', 'clv200':'int', 'clv250':'int'})\n",
    "clv150, clv200, clv250= exh2[['clv150', 'clv200', 'clv250']].mean()\n",
    "clv150"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "71.83333333333333"
      ]
     },
     "execution_count": 170,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = (clv150 + clv200 + clv250) / 3\n",
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.03042722351121423"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fixed = 10000+1600+6000 \n",
    "cost_per_customer = fixed/750000\n",
    "breakeven = cost_per_customer + 0.50 / mean\n",
    "breakeven"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As per the analysis above, we should go from a response rate of 1.80% to 3.05%. Using this number, we use radiants to estimate the sample size for our test mailing "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/sample_size.png)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have estimated the sample size to launch our test, we have to decide if we send a test mailing to everyone or only a few product offerings. As per our idea, we want to produce the most efficient test campaign at the lowest cost. Hence, we will send a test campaign with our 6 product design to each of the BK_score, with a sample size as above.\n",
    "\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results from the test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_excel('data/test.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>sent_150</th>\n",
       "      <th>responses_150</th>\n",
       "      <th>sent_200</th>\n",
       "      <th>responses_200</th>\n",
       "      <th>sent_250</th>\n",
       "      <th>responses_250</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3684</td>\n",
       "      <td>37</td>\n",
       "      <td>3684</td>\n",
       "      <td>51</td>\n",
       "      <td>3684</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>3684</td>\n",
       "      <td>144</td>\n",
       "      <td>3684</td>\n",
       "      <td>170</td>\n",
       "      <td>3684</td>\n",
       "      <td>228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3684</td>\n",
       "      <td>9</td>\n",
       "      <td>3684</td>\n",
       "      <td>30</td>\n",
       "      <td>3684</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>3684</td>\n",
       "      <td>50</td>\n",
       "      <td>3684</td>\n",
       "      <td>74</td>\n",
       "      <td>3684</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3684</td>\n",
       "      <td>14</td>\n",
       "      <td>3684</td>\n",
       "      <td>13</td>\n",
       "      <td>3684</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    apr fixed_var annual_fee  sent_150  responses_150  sent_200  \\\n",
       "0  14.9  Variable        Yes      3684             37      3684   \n",
       "1  14.9     Fixed         No      3684            144      3684   \n",
       "2  16.8     Fixed        Yes      3684              9      3684   \n",
       "3  16.8  Variable         No      3684             50      3684   \n",
       "4  19.8  Variable        Yes      3684             14      3684   \n",
       "\n",
       "   responses_200  sent_250  responses_250  \n",
       "0             51      3684             63  \n",
       "1            170      3684            228  \n",
       "2             30      3684             23  \n",
       "3             74      3684             76  \n",
       "4             13      3684             12  "
      ]
     },
     "execution_count": 128,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     apr fixed_var annual_fee bk_score  sent  responses\n",
      "0   14.9  Variable        Yes      150  3684         37\n",
      "1   14.9     Fixed         No      150  3684        144\n",
      "2   16.8     Fixed        Yes      150  3684          9\n",
      "3   16.8  Variable         No      150  3684         50\n",
      "4   19.8  Variable        Yes      150  3684         14\n",
      "5   19.8     Fixed         No      150  3684         51\n",
      "6   14.9  Variable        Yes      200  3684         51\n",
      "7   14.9     Fixed         No      200  3684        170\n",
      "8   16.8     Fixed        Yes      200  3684         30\n",
      "9   16.8  Variable         No      200  3684         74\n",
      "10  19.8  Variable        Yes      200  3684         13\n",
      "11  19.8     Fixed         No      200  3684         48\n",
      "12  14.9  Variable        Yes      250  3684         63\n",
      "13  14.9     Fixed         No      250  3684        228\n",
      "14  16.8     Fixed        Yes      250  3684         23\n",
      "15  16.8  Variable         No      250  3684         76\n",
      "16  19.8  Variable        Yes      250  3684         12\n",
      "17  19.8     Fixed         No      250  3684         59\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Melting the DataFrame\n",
    "sent_melted = test.melt(id_vars=[\"apr\", \"fixed_var\", \"annual_fee\"], value_vars=[\"sent_150\", \"sent_200\", \"sent_250\"], var_name=\"bk_score\", value_name=\"sent\")\n",
    "responses_melted = test.melt(id_vars=[\"apr\", \"fixed_var\", \"annual_fee\"], value_vars=[\"responses_150\", \"responses_200\", \"responses_250\"], var_name=\"bk_score\", value_name=\"responses\")\n",
    "\n",
    "# Adjusting the bk_score values to reflect just the score\n",
    "sent_melted['bk_score'] = sent_melted['bk_score'].str.replace('sent_', '')\n",
    "responses_melted['bk_score'] = responses_melted['bk_score'].str.replace('responses_', '')\n",
    "\n",
    "# Merging the melted DataFrames\n",
    "test = pd.merge(sent_melted, responses_melted, on=[\"apr\", \"fixed_var\", \"annual_fee\", \"bk_score\"])\n",
    "\n",
    "print(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['no_resp'] = test['sent'] - test['responses']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "      <th>sent</th>\n",
       "      <th>responses</th>\n",
       "      <th>no_resp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>37</td>\n",
       "      <td>3647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>144</td>\n",
       "      <td>3540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>9</td>\n",
       "      <td>3675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>50</td>\n",
       "      <td>3634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>14</td>\n",
       "      <td>3670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>3684</td>\n",
       "      <td>51</td>\n",
       "      <td>3633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>51</td>\n",
       "      <td>3633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>170</td>\n",
       "      <td>3514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>30</td>\n",
       "      <td>3654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>74</td>\n",
       "      <td>3610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>13</td>\n",
       "      <td>3671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>3684</td>\n",
       "      <td>48</td>\n",
       "      <td>3636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>63</td>\n",
       "      <td>3621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>228</td>\n",
       "      <td>3456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>23</td>\n",
       "      <td>3661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>76</td>\n",
       "      <td>3608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>12</td>\n",
       "      <td>3672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>3684</td>\n",
       "      <td>59</td>\n",
       "      <td>3625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var annual_fee bk_score  sent  responses  no_resp\n",
       "0   14.9  Variable        Yes      150  3684         37     3647\n",
       "1   14.9     Fixed         No      150  3684        144     3540\n",
       "2   16.8     Fixed        Yes      150  3684          9     3675\n",
       "3   16.8  Variable         No      150  3684         50     3634\n",
       "4   19.8  Variable        Yes      150  3684         14     3670\n",
       "5   19.8     Fixed         No      150  3684         51     3633\n",
       "6   14.9  Variable        Yes      200  3684         51     3633\n",
       "7   14.9     Fixed         No      200  3684        170     3514\n",
       "8   16.8     Fixed        Yes      200  3684         30     3654\n",
       "9   16.8  Variable         No      200  3684         74     3610\n",
       "10  19.8  Variable        Yes      200  3684         13     3671\n",
       "11  19.8     Fixed         No      200  3684         48     3636\n",
       "12  14.9  Variable        Yes      250  3684         63     3621\n",
       "13  14.9     Fixed         No      250  3684        228     3456\n",
       "14  16.8     Fixed        Yes      250  3684         23     3661\n",
       "15  16.8  Variable         No      250  3684         76     3608\n",
       "16  19.8  Variable        Yes      250  3684         12     3672\n",
       "17  19.8     Fixed         No      250  3684         59     3625"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = test.melt(id_vars=[\"apr\", \"fixed_var\", \"annual_fee\", \"bk_score\"], value_vars=[\"no_resp\", \"responses\"], var_name=\"resp\", value_name=\"freq\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "      <th>resp</th>\n",
       "      <th>freq</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>no_resp</td>\n",
       "      <td>3625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>responses</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>responses</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>responses</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var annual_fee bk_score       resp  freq\n",
       "0   14.9  Variable        Yes      150    no_resp  3647\n",
       "1   14.9     Fixed         No      150    no_resp  3540\n",
       "2   16.8     Fixed        Yes      150    no_resp  3675\n",
       "3   16.8  Variable         No      150    no_resp  3634\n",
       "4   19.8  Variable        Yes      150    no_resp  3670\n",
       "5   19.8     Fixed         No      150    no_resp  3633\n",
       "6   14.9  Variable        Yes      200    no_resp  3633\n",
       "7   14.9     Fixed         No      200    no_resp  3514\n",
       "8   16.8     Fixed        Yes      200    no_resp  3654\n",
       "9   16.8  Variable         No      200    no_resp  3610\n",
       "10  19.8  Variable        Yes      200    no_resp  3671\n",
       "11  19.8     Fixed         No      200    no_resp  3636\n",
       "12  14.9  Variable        Yes      250    no_resp  3621\n",
       "13  14.9     Fixed         No      250    no_resp  3456\n",
       "14  16.8     Fixed        Yes      250    no_resp  3661\n",
       "15  16.8  Variable         No      250    no_resp  3608\n",
       "16  19.8  Variable        Yes      250    no_resp  3672\n",
       "17  19.8     Fixed         No      250    no_resp  3625\n",
       "18  14.9  Variable        Yes      150  responses    37\n",
       "19  14.9     Fixed         No      150  responses   144\n",
       "20  16.8     Fixed        Yes      150  responses     9\n",
       "21  16.8  Variable         No      150  responses    50\n",
       "22  19.8  Variable        Yes      150  responses    14\n",
       "23  19.8     Fixed         No      150  responses    51\n",
       "24  14.9  Variable        Yes      200  responses    51\n",
       "25  14.9     Fixed         No      200  responses   170\n",
       "26  16.8     Fixed        Yes      200  responses    30\n",
       "27  16.8  Variable         No      200  responses    74\n",
       "28  19.8  Variable        Yes      200  responses    13\n",
       "29  19.8     Fixed         No      200  responses    48\n",
       "30  14.9  Variable        Yes      250  responses    63\n",
       "31  14.9     Fixed         No      250  responses   228\n",
       "32  16.8     Fixed        Yes      250  responses    23\n",
       "33  16.8  Variable         No      250  responses    76\n",
       "34  19.8  Variable        Yes      250  responses    12\n",
       "35  19.8     Fixed         No      250  responses    59"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic regression on the latest test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['apr'] = test['apr'].astype('category')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "evar=['apr', 'fixed_var', 'annual_fee', 'bk_score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['apr:bk_score', 'fixed_var:bk_score', 'annual_fee:bk_score']"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ivar=[f'{e}:bk_score' for e in evar if e != 'bk_score']\n",
    "ivar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = rsm.model.logistic(\n",
    "    data={'test': test},\n",
    "          rvar='resp',\n",
    "          lev='responses',\n",
    "          evar=['apr', 'fixed_var', 'annual_fee', 'bk_score'],\n",
    "          weights='freq')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : test\n",
      "Response variable    : resp\n",
      "Level                : responses\n",
      "Explanatory variables: apr, fixed_var, annual_fee, bk_score\n",
      "Weights used         : freq\n",
      "Null hyp.: There is no effect of x on resp\n",
      "Alt. hyp.: There is an effect of x on resp\n",
      "\n",
      "                        OR     OR%  coefficient  std.error  z.value p.value     \n",
      "Intercept            0.041  -95.9%        -3.20      0.065  -48.807  < .001  ***\n",
      "apr[16.8]            0.383  -61.7%        -0.96      0.086  -11.167  < .001  ***\n",
      "apr[19.8]            0.275  -72.5%        -1.29      0.082  -15.815  < .001  ***\n",
      "fixed_var[Variable]  0.927   -7.3%        -0.08      0.084   -0.906   0.365     \n",
      "annual_fee[Yes]      0.284  -71.6%        -1.26      0.084  -15.025  < .001  ***\n",
      "bk_score[200]        1.274   27.4%         0.24      0.078    3.118   0.002   **\n",
      "bk_score[250]        1.531   53.1%         0.43      0.075    5.685  < .001  ***\n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.068\n",
      "Pseudo R-squared (McFadden adjusted): 0.067\n",
      "Area under the RO Curve (AUC): 0.726\n",
      "Log-likelihood: -5415.446, AIC: 10844.892, BIC: 10908.607\n",
      "Chi-squared: 790.793, df(6), p.value < 0.001 \n",
      "Nr obs: 66,312\n"
     ]
    }
   ],
   "source": [
    "lr.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr.plot('pred')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want to try interactions to see if it has an influence on the logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_ivar = rsm.model.logistic(\n",
    "    data={'test': test},\n",
    "          rvar='resp',\n",
    "          lev='responses',\n",
    "          evar=['apr', 'fixed_var', 'annual_fee', 'bk_score'],\n",
    "          ivar=ivar,\n",
    "          weights='freq')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression (GLM)\n",
      "Data                 : test\n",
      "Response variable    : resp\n",
      "Level                : responses\n",
      "Explanatory variables: apr, fixed_var, annual_fee, bk_score\n",
      "Weights used         : freq\n",
      "Null hyp.: There is no effect of x on resp\n",
      "Alt. hyp.: There is an effect of x on resp\n",
      "\n",
      "                                      OR     OR%  coefficient  std.error  z.value p.value     \n",
      "Intercept                          0.040  -96.0%        -3.21      0.083  -38.745  < .001  ***\n",
      "apr[16.8]                          0.284  -71.6%        -1.26      0.202   -6.243  < .001  ***\n",
      "apr[19.8]                          0.351  -64.9%        -1.05      0.146   -7.168  < .001  ***\n",
      "fixed_var[Variable]                1.197   19.7%         0.18      0.198    0.910   0.363     \n",
      "annual_fee[Yes]                    0.213  -78.7%        -1.55      0.198   -7.809  < .001  ***\n",
      "bk_score[200]                      1.200   20.0%         0.18      0.113    1.617   0.106     \n",
      "bk_score[250]                      1.648   64.8%         0.50      0.106    4.702  < .001  ***\n",
      "apr[16.8]:bk_score[200]            1.762   76.2%         0.57      0.242    2.337   0.019    *\n",
      "apr[19.8]:bk_score[200]            0.763  -23.7%        -0.27      0.206   -1.311    0.19     \n",
      "apr[16.8]:bk_score[250]            1.213   21.3%         0.19      0.245    0.789    0.43     \n",
      "apr[19.8]:bk_score[250]            0.666  -33.4%        -0.41      0.198   -2.053    0.04    *\n",
      "fixed_var[Variable]:bk_score[200]  0.705  -29.5%        -0.35      0.237   -1.476    0.14     \n",
      "fixed_var[Variable]:bk_score[250]  0.766  -23.4%        -0.27      0.240   -1.110   0.267     \n",
      "annual_fee[Yes]:bk_score[200]      1.586   58.6%         0.46      0.237    1.946   0.052    .\n",
      "annual_fee[Yes]:bk_score[250]      1.283   28.3%         0.25      0.240    1.038   0.299     \n",
      "\n",
      "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
      "\n",
      "Pseudo R-squared (McFadden): 0.069\n",
      "Pseudo R-squared (McFadden adjusted): 0.067\n",
      "Area under the RO Curve (AUC): 0.728\n",
      "Log-likelihood: -5407.927, AIC: 10845.853, BIC: 10982.385\n",
      "Chi-squared: 805.832, df(14), p.value < 0.001 \n",
      "Nr obs: 66,312\n"
     ]
    }
   ],
   "source": [
    "lr_ivar.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_ivar.plot('pred')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var annual_fee bk_score\n",
       "0   14.9  Variable        Yes      150\n",
       "1   14.9  Variable        Yes      200\n",
       "2   14.9  Variable        Yes      250\n",
       "3   14.9  Variable         No      150\n",
       "4   14.9  Variable         No      200\n",
       "5   14.9  Variable         No      250\n",
       "6   14.9     Fixed        Yes      150\n",
       "7   14.9     Fixed        Yes      200\n",
       "8   14.9     Fixed        Yes      250\n",
       "9   14.9     Fixed         No      150\n",
       "10  14.9     Fixed         No      200\n",
       "11  14.9     Fixed         No      250\n",
       "12  16.8  Variable        Yes      150\n",
       "13  16.8  Variable        Yes      200\n",
       "14  16.8  Variable        Yes      250\n",
       "15  16.8  Variable         No      150\n",
       "16  16.8  Variable         No      200\n",
       "17  16.8  Variable         No      250\n",
       "18  16.8     Fixed        Yes      150\n",
       "19  16.8     Fixed        Yes      200\n",
       "20  16.8     Fixed        Yes      250\n",
       "21  16.8     Fixed         No      150\n",
       "22  16.8     Fixed         No      200\n",
       "23  16.8     Fixed         No      250\n",
       "24  19.8  Variable        Yes      150\n",
       "25  19.8  Variable        Yes      200\n",
       "26  19.8  Variable        Yes      250\n",
       "27  19.8  Variable         No      150\n",
       "28  19.8  Variable         No      200\n",
       "29  19.8  Variable         No      250\n",
       "30  19.8     Fixed        Yes      150\n",
       "31  19.8     Fixed        Yes      200\n",
       "32  19.8     Fixed        Yes      250\n",
       "33  19.8     Fixed         No      150\n",
       "34  19.8     Fixed         No      200\n",
       "35  19.8     Fixed         No      250"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dct = rsm.levels_list(test[['apr', 'fixed_var', 'annual_fee', 'bk_score']])\n",
    "dct\n",
    "\n",
    "test_mult_expand = rsm.expand_grid(dct)\n",
    "test_mult_expand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_mult_expand['pred'] = lr.predict(data=test_mult_expand)['prediction']\n",
    "df = test_mult_expand.copy()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Include CLV's value as per the exhibit 2 depending on the product offering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr           float64\n",
      "fixed_var      object\n",
      "annual_fee     object\n",
      "bk_score       object\n",
      "pred          float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(df.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['apr'] = df['apr'].astype('float')\n",
    "df['bk_score'] = df['bk_score'].astype('int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# Define the conditions and the respective CLV values\n",
    "conditions = [\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 250),\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 14.9) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 250),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 250),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 16.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 250),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Variable\") & (df['annual_fee'] == \"Yes\") & (df['bk_score'] == 250),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 150),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 200),\n",
    "    (df['apr'] == 19.8) & (df['fixed_var'] == \"Fixed\") & (df['annual_fee'] == \"No\") & (df['bk_score'] == 250),\n",
    "]\n",
    "\n",
    "choices = [93, 73, 43, 52, 32, 2, 103, 83, 53, 82, 62, 32, 141, 121, 91, 100, 80, 50]\n",
    "\n",
    "\n",
    "# Applying the conditions to assign values to 'CLV'\n",
    "df['CLV'] = np.select(conditions, choices)  # Using np.nan as default to clearly see unmatched conditions\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['exp_profit'] = df['pred'] * df['CLV']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apr</th>\n",
       "      <th>fixed_var</th>\n",
       "      <th>annual_fee</th>\n",
       "      <th>bk_score</th>\n",
       "      <th>pred</th>\n",
       "      <th>CLV</th>\n",
       "      <th>exp_profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.010639</td>\n",
       "      <td>93</td>\n",
       "      <td>0.989396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.013514</td>\n",
       "      <td>73</td>\n",
       "      <td>0.986538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.016195</td>\n",
       "      <td>43</td>\n",
       "      <td>0.696406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.036529</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.046077</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.054859</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.011468</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.014565</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.017451</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.039298</td>\n",
       "      <td>52</td>\n",
       "      <td>2.043491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.049532</td>\n",
       "      <td>32</td>\n",
       "      <td>1.585024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>14.9</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.058932</td>\n",
       "      <td>2</td>\n",
       "      <td>0.117865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.004107</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.005226</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.006273</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.014330</td>\n",
       "      <td>82</td>\n",
       "      <td>1.175090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.018185</td>\n",
       "      <td>62</td>\n",
       "      <td>1.127496</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.021773</td>\n",
       "      <td>32</td>\n",
       "      <td>0.696737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.004429</td>\n",
       "      <td>103</td>\n",
       "      <td>0.456195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.005636</td>\n",
       "      <td>83</td>\n",
       "      <td>0.467770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.006765</td>\n",
       "      <td>53</td>\n",
       "      <td>0.358527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.015444</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.019592</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>16.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.023451</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.002953</td>\n",
       "      <td>141</td>\n",
       "      <td>0.416381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.003759</td>\n",
       "      <td>121</td>\n",
       "      <td>0.454855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.004514</td>\n",
       "      <td>91</td>\n",
       "      <td>0.410757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.010335</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.013130</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Variable</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.015736</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>150</td>\n",
       "      <td>0.003185</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>200</td>\n",
       "      <td>0.004055</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>Yes</td>\n",
       "      <td>250</td>\n",
       "      <td>0.004868</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>150</td>\n",
       "      <td>0.011141</td>\n",
       "      <td>100</td>\n",
       "      <td>1.114137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>200</td>\n",
       "      <td>0.014151</td>\n",
       "      <td>80</td>\n",
       "      <td>1.132068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>19.8</td>\n",
       "      <td>Fixed</td>\n",
       "      <td>No</td>\n",
       "      <td>250</td>\n",
       "      <td>0.016956</td>\n",
       "      <td>50</td>\n",
       "      <td>0.847813</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     apr fixed_var annual_fee  bk_score      pred  CLV  exp_profit\n",
       "0   14.9  Variable        Yes       150  0.010639   93    0.989396\n",
       "1   14.9  Variable        Yes       200  0.013514   73    0.986538\n",
       "2   14.9  Variable        Yes       250  0.016195   43    0.696406\n",
       "3   14.9  Variable         No       150  0.036529    0    0.000000\n",
       "4   14.9  Variable         No       200  0.046077    0    0.000000\n",
       "5   14.9  Variable         No       250  0.054859    0    0.000000\n",
       "6   14.9     Fixed        Yes       150  0.011468    0    0.000000\n",
       "7   14.9     Fixed        Yes       200  0.014565    0    0.000000\n",
       "8   14.9     Fixed        Yes       250  0.017451    0    0.000000\n",
       "9   14.9     Fixed         No       150  0.039298   52    2.043491\n",
       "10  14.9     Fixed         No       200  0.049532   32    1.585024\n",
       "11  14.9     Fixed         No       250  0.058932    2    0.117865\n",
       "12  16.8  Variable        Yes       150  0.004107    0    0.000000\n",
       "13  16.8  Variable        Yes       200  0.005226    0    0.000000\n",
       "14  16.8  Variable        Yes       250  0.006273    0    0.000000\n",
       "15  16.8  Variable         No       150  0.014330   82    1.175090\n",
       "16  16.8  Variable         No       200  0.018185   62    1.127496\n",
       "17  16.8  Variable         No       250  0.021773   32    0.696737\n",
       "18  16.8     Fixed        Yes       150  0.004429  103    0.456195\n",
       "19  16.8     Fixed        Yes       200  0.005636   83    0.467770\n",
       "20  16.8     Fixed        Yes       250  0.006765   53    0.358527\n",
       "21  16.8     Fixed         No       150  0.015444    0    0.000000\n",
       "22  16.8     Fixed         No       200  0.019592    0    0.000000\n",
       "23  16.8     Fixed         No       250  0.023451    0    0.000000\n",
       "24  19.8  Variable        Yes       150  0.002953  141    0.416381\n",
       "25  19.8  Variable        Yes       200  0.003759  121    0.454855\n",
       "26  19.8  Variable        Yes       250  0.004514   91    0.410757\n",
       "27  19.8  Variable         No       150  0.010335    0    0.000000\n",
       "28  19.8  Variable         No       200  0.013130    0    0.000000\n",
       "29  19.8  Variable         No       250  0.015736    0    0.000000\n",
       "30  19.8     Fixed        Yes       150  0.003185    0    0.000000\n",
       "31  19.8     Fixed        Yes       200  0.004055    0    0.000000\n",
       "32  19.8     Fixed        Yes       250  0.004868    0    0.000000\n",
       "33  19.8     Fixed         No       150  0.011141  100    1.114137\n",
       "34  19.8     Fixed         No       200  0.014151   80    1.132068\n",
       "35  19.8     Fixed         No       250  0.016956   50    0.847813"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               14.9\n",
      "fixed_var        Fixed\n",
      "annual_fee          No\n",
      "bk_score           200\n",
      "pred          0.049532\n",
      "CLV                 32\n",
      "exp_profit    1.585024\n",
      "Name: 10, dtype: object\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Filter the DataFrame for bk_score = 200 and find the row with the maximum pred value\n",
    "filtered_df = df[df['bk_score'] == 200]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['exp_profit'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               19.8\n",
      "fixed_var        Fixed\n",
      "annual_fee          No\n",
      "bk_score           250\n",
      "pred          0.016956\n",
      "CLV                 50\n",
      "exp_profit    0.847813\n",
      "Name: 35, dtype: object\n"
     ]
    }
   ],
   "source": [
    "filtered_df = df[df['bk_score'] == 250]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['exp_profit'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "apr               14.9\n",
      "fixed_var        Fixed\n",
      "annual_fee          No\n",
      "bk_score           150\n",
      "pred          0.039298\n",
      "CLV                 52\n",
      "exp_profit    2.043491\n",
      "Name: 9, dtype: object\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Filter the DataFrame for bk_score = 200 and find the row with the maximum pred value\n",
    "filtered_df = df[df['bk_score'] == 150]\n",
    "max_pred_row_alternative = filtered_df.loc[filtered_df['exp_profit'].idxmax()]\n",
    "print(max_pred_row_alternative)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our strategy here is to multiply the predictions with the Customer LifeTime Value in order to compute the expected profit per email sent. Once computed, we have to look at the offering that yields the highest expected profit for each customer segment. Also, we made sure that the expected profit is higher than the cost of mailing per customer. \n",
    "\n",
    "Based on these results, customers with BK scores 150 and 200 should receive the offering with the lowest APR and fixed rate, with no annual fee. The customers with a BK score of 250 should receive the offering with the highest APR, but still a fixed rate and no annual fee.\n",
    "\n",
    "Please see below the results of the simluation. "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![](images/results.png)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CHATGPT use"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our chat used:\n",
    "- https://chat.openai.com/share/f8eb7c1d-a0ec-4b56-bd83-a5f6311ea76a\n",
    "- https://chat.openai.com/share/aef13a4c-ae5a-4435-8522-473e049171da\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In tackling our case study, our team strategically leveraged Generative AI tools, notably ChatGPT, to enhance our research, analysis, and solution formulation processes. Our approach was multifaceted, aiming to capitalize on ChatGPT's capabilities to streamline our workflow, augment our creativity, and bolster our analytical depth.\n",
    "\n",
    "* Research and Information Gathering:\n",
    "\n",
    "We initiated our project by using ChatGPT to perform preliminary research. Given ChatGPT's expansive knowledge base, we queried it for background information on customer lifetime value and its relationship with bankruptcy scores in the banking sector. This step provided us with a foundational understanding and pointed us towards relevant financial models and analytical techniques. While ChatGPT offered broad overviews and insights, we noted its limitations in accessing the most current studies or data due to its training cut-off in April 2023. To mitigate this, we complemented AI-generated insights with current research from reputable sources, ensuring our project was informed by the most up-to-date information.\n",
    "\n",
    "* Strategy Formulation:\n",
    "\n",
    "Our strategy development greatly benefited from brainstorming sessions with ChatGPT. We discussed various strategic approaches, including predictive modeling and segmentation techniques, to address the case study's objectives. ChatGPT's instant responses to our queries about different strategies allowed us to quickly evaluate the pros and cons of each approach, significantly accelerating our decision-making process. However, we encountered challenges in assessing the feasibility of certain AI-suggested strategies, requiring us to critically evaluate each suggestion before incorporation into our plan.\n",
    "\n",
    "* Drafting and Refinement:\n",
    "\n",
    "For documentation and reporting, ChatGPT was instrumental in drafting sections of our report, generating well-articulated explanations of complex concepts, and suggesting layouts for presenting our findings. It enhanced our productivity by handling routine writing tasks, allowing us to focus on deeper analytical work. We did face challenges in ensuring the accuracy and relevance of AI-generated content, which necessitated thorough reviews and edits to align with our project's specific context.\n",
    "\n",
    "* Analysis and Simulation:\n",
    "\n",
    "We explored the potential of using AI for data analysis and simulation, discussing with ChatGPT various statistical techniques and models that could be applied to our data. ChatGPT provided code snippets and explanations for data manipulation and visualization, which we adapted for our analysis. However, the inability to execute code directly or access external databases through ChatGPT limited its utility for hands-on analysis, leading us to use other software tools for actual data processing.\n",
    "\n",
    "* Maximizing Benefits and Mitigating Limitations:\n",
    "\n",
    "Our thought process throughout the project was geared towards leveraging ChatGPT's strengths—speed, breadth of knowledge, and versatility—while being mindful of its limitations. We adopted a strategy of using ChatGPT for initial ideation, drafting, and knowledge checks, followed by a rigorous review process where we verified information, refined ideas, and applied professional judgment to ensure the accuracy and appropriateness of our final output.\n",
    "\n",
    "In conclusion, our experience with using Generative AI tools like ChatGPT in this case study was predominantly positive, significantly enhancing our efficiency and creativity. The key to maximizing benefits from these tools was a balanced approach: leveraging AI for its strengths while critically evaluating its output and supplementing it with detailed research and expert analysis. This approach allowed us to navigate the limitations of AI and produce a comprehensive, informed, and nuanced case study solution."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
